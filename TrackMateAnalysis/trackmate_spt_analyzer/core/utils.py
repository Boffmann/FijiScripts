"""
Utility functions for TrackMate SPT Analyzer.

Contains helper functions for file operations, timestamps, and report generation.
"""

import io
import datetime as dt
import textwrap
import html
import warnings
from pathlib import Path
from typing import Dict, List

import pandas as pd

def build_readme_text() -> str:
    """
    Returns an ASCII README that accompanies `summary_all.csv`.
    Now includes explicit formulas for every metric.
    """
    return r"""\
TrackMate SPT Analyzer – README for exported CSV files
=====================================================

This README explains every column in *summary_all.csv* (and the per-file CSVs)
plus the key maths behind them.

------------------------------------------------------------
Quick legend of symbols used below
------------------------------------------------------------
x, y        localisation coordinates in micrometres (µm)
t           time in seconds (s)
τ (tau)     lag time used for MSD
N           number of localisations in the track

Δx_i        = x_{i+1} – x_i     (step in x between consecutive frames)
Δr_i        = sqrt(Δx_i² + Δy_i²)   (step length)

------------------------------------------------------------
Column glossary + formulas
------------------------------------------------------------

file       – TrackMate XML file name
track_id   – integer ID assigned by TrackMate
n_pts      – number of localisation points (N) in the track
dur_s      – N · dt     (dt = frame interval)

D          – *effective* diffusion coefficient      [µm²·s⁻¹]
             Estimated from the ensemble MSD fit:
                 MSD(τ)  ≈  4 · D · τ^α
             so    D  =  slope / 4    in the log-log fit
             (only physically meaningful when α ≈ 1)

α (alpha)  – anomalous scaling exponent
             Obtained as the slope of log(MSD) vs log(τ):
                 α  =  d[log(MSD)] / d[log(τ)]

Rg         – radius of gyration of the track         [µm]
                 Rg²  =  (1/N) · Σ_{i=1..N} ( (x_i – x̄)² + (y_i – ȳ)² )

v_mean     – mean instantaneous velocity             [µm·s⁻¹]
                 v_mean  =  (1/(N–1)) · Σ Δr_i / dt

v_max      – maximum instantaneous velocity          [µm·s⁻¹]
                 v_max   =  max_i ( Δr_i / dt )

pixel      – pixel size used to convert TrackMate positions   [µm·px⁻¹]
dt         – frame interval (median Δt from `POSITION_T`)     [s]

------------------------------------------------------------
Sliding-window metrics (in per-window CSVs)
------------------------------------------------------------

frame_start   first frame of the window
alpha         local exponent computed on that window
state         motion class:
                 static      if   α ≤ α_low
                 diffusive   if   α_low < α ≤ α_high
                 active      if   α > α_high
               (α_low / α_high set in the GUI)

------------------------------------------------------------
Abbreviations
------------------------------------------------------------
MSD   – Mean-Squared Displacement
RMS   – Root-Mean-Square
Rg    – Radius of gyration
"""

def timestamp(fmt: str = "%Y%m%d-%H%M") -> str:
    """Generate a timestamp string in the specified format."""
    return dt.datetime.now().strftime(fmt)

def save_with_suffix(path: Path, suffix: str = "") -> Path:
    """Return a *new* path that avoids overwriting existing files."""
    if not path.exists():
        return path
    stem, ext = path.stem, path.suffix
    new_path = path.with_name(f"{stem}{suffix}_{timestamp()}{ext}")
    warnings.warn(f"File {path.name} exists → writing to {new_path.name} instead.")
    return new_path

def qc_report_html(summary_df: pd.DataFrame, meta: Dict[str, float],
                   warnings_: List[str]) -> str:
    """Return HTML string containing a tiny QC report."""
    buf = io.StringIO()
    buf.write("<h2>TrackMate SPT Analyzer – QC Report</h2>")
    buf.write(f"<p><b>Generated:</b> {timestamp('%Y-%m-%d %H:%M:%S')}</p>")
    buf.write("<h3>Dataset overview</h3>")
    buf.write(summary_df.describe().to_html(float_format="%.3g"))
    if warnings_:
        buf.write("<h3>Warnings</h3><ul>")
        for w in warnings_:
            buf.write(f"<li>{html.escape(w)}</li>")
        buf.write("</ul>")
    buf.write("<hr><small>Report auto-generated by TrackMate SPT Analyzer.</small>")
    return buf.getvalue() 